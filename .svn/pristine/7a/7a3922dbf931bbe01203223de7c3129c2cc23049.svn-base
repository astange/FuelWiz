package com.jas.fuelwiz;

import java.util.Arrays;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Looper;
import android.provider.Settings;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.SeekBar;
import android.widget.TabHost;
import android.widget.TextView;


public class MainActivity extends Activity {
	//define buttons in xml
	EditText editMPG, gallonsToFill;
	Button bCompute;
	TextView tGallonstoFill;
	TabHost gasGradeTabs;
	SeekBar seekRadius;
	
	public static String longitude;
	public static String latitude;
	
	private double gallons, mpg;
	
	public static GoogleDistance[] ReturnedDrivingDistances;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		//new ProgressBar().execute();
		setContentView(R.layout.activity_main);
		//get pointer to button in gui
		
		editMPG = (EditText) findViewById(R.id.editMPG);
		gallonsToFill = (EditText) findViewById(R.id.editGallons);
		bCompute = (Button) findViewById(R.id.bCompute);
		tGallonstoFill = (TextView) findViewById(R.id.tvGallons);
		
		final TabHost tabHost = (TabHost) findViewById(android.R.id.tabhost);
		tabHost.setup();
		tabHost.addTab(tabHost.newTabSpec("reg").setIndicator("Regular").setContent(R.id.tabReg));
		tabHost.addTab(tabHost.newTabSpec("mid").setIndicator("Midgrade").setContent(R.id.tabMid));
		tabHost.addTab(tabHost.newTabSpec("pre").setIndicator("Premium").setContent(R.id.tabPre));
		tabHost.addTab(tabHost.newTabSpec("diesel").setIndicator("Diesel").setContent(R.id.tabDiesel));
		tabHost.setCurrentTab(0);
		tabHost.setVisibility(View.VISIBLE);
		
		
		bCompute.setEnabled(false);		

		LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		AlertDialog.Builder dialog;
        try{
        	//if(lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)){
        	if(lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)){
        		LocationListener locationListener = new MyLocationListener();  
        		Looper loop = Looper.getMainLooper();
        		//locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, locationListener);
        		lm.requestSingleUpdate(LocationManager.NETWORK_PROVIDER, locationListener, loop);
        	}
        	else{
        		dialog = new AlertDialog.Builder(this);
	            dialog.setMessage(this.getResources().getString(R.string.network_not_enabled));
	            dialog.setPositiveButton(this.getResources().getString(R.string.open_location_settings), new DialogInterface.OnClickListener() {

	                @Override
	                public void onClick(DialogInterface paramDialogInterface, int paramInt) {
	                    // TODO Auto-generated method stub
	                    Intent myIntent = new Intent( Settings.ACTION_LOCATION_SOURCE_SETTINGS );
	                    startActivity(myIntent);
	                    //get gps
	                }
	            });
	            dialog.setNegativeButton(this.getString(R.string.Cancel), new DialogInterface.OnClickListener() {

	                @Override
	                public void onClick(DialogInterface paramDialogInterface, int paramInt) {
	                    finish();
	                }
	            });
	            dialog.show();
        	}
        }catch(Exception ex){
        	ex.printStackTrace();
        }

		
		bCompute.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				//set values from edittext to variables:
				mpg = Double.parseDouble(editMPG.getText().toString().trim());
				gallons = Double.parseDouble(gallonsToFill.getText().toString().trim());
				//will fail if not doubles
				GasStation[] ReturnedStations = GasStationRequest.getGasStationsDistance(latitude, longitude, "3", tabHost.getCurrentTabTag(), "price");
				
				ReturnedDrivingDistances = GoogleDistanceMatrixRequest.getGoogleDistanceRequest(latitude, longitude, ReturnedStations);
				
				for(int i = 0; i < ReturnedDrivingDistances.length; i++) {
					ReturnedDrivingDistances[i].getStation().setSavings(computeTotalCost(ReturnedDrivingDistances[i].getDistanceInMiles(), 
																						gallons, 
																						mpg, 
																						Double.parseDouble(ReturnedDrivingDistances[i].getStation().getPrice()), 
																						true));
				}
				//sort in ascending order by cheapest station to go to
			//	sortbySavings(ReturnedDrivingDistances);
				Arrays.sort(ReturnedDrivingDistances);
				
				Intent displayActivity = new Intent(getApplicationContext(), GasStationDisplayActivity.class);
				startActivity(displayActivity);
				
			}
		});
	}

	private double computeTotalCost(double distance, double gallonsToFill, double mpg, double priceOfGas, boolean twoWayTrip) {
		if(twoWayTrip) {
			distance *= 2;
		}
		return (((distance/mpg) + gallonsToFill) * priceOfGas);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	private class MyLocationListener implements LocationListener {

	    @Override
	    public void onLocationChanged(Location loc) {
	        longitude = "" + loc.getLongitude();
	        latitude = "" + loc.getLatitude();
	      //  tResult.setText(latitude + "," + longitude);
	        bCompute.setEnabled(true);
	    }

	    @Override
	    public void onProviderDisabled(String provider) {}

	    @Override
	    public void onProviderEnabled(String provider) {}

	    @Override
	    public void onStatusChanged(String provider, int status, Bundle extras) {}
	}

	private class ProgressBar extends AsyncTask<Void, Integer, Void>{
		private ProgressDialog pd;
		@Override
		protected void onPreExecute() {
			//initialize a new instance of Progress Dialog and configure settings
			pd = new ProgressDialog(MainActivity.this);
			pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
			pd.setTitle("Loading...");
			pd.setMessage("Loading application, please wait");
			pd.setCancelable(false);
			pd.setIndeterminate(true);
			pd.show();
			
		}

		/*
		 * Background task to run before loading the application
		 */
		@Override
		protected Void doInBackground(Void... params) {
			try {
				synchronized (this) {
					int counter = 0;
					while(counter <= 4){
						this.wait(4000);
						counter++;
						//Set the current progress. 
						publishProgress(counter * 25);
					}
				}
			} 
			catch (InterruptedException e) {
				e.printStackTrace();
			}
			return null;
		}

		//Update the progress bar
		@Override
		protected void onProgressUpdate(Integer... values){ 
			pd.setProgress(values[0]);
		}
		
		//After executing the code in the thread, it closes the load screen.
		@Override
		protected void onPostExecute(Void result) {
			pd.dismiss();
		}
	}

}
